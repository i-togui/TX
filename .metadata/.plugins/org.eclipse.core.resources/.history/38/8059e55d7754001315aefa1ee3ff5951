package core;
import java.io.File;
import java.io.FileWriter;
import java.io.StringWriter;
import java.util.ArrayList;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

import android.graphics.Color;
import android.os.Environment;
import android.util.Xml;

public class ListItem 
{
	
	//Attributs & Constructor
	String listName;
	String listColor;
	ArrayList<Item> list = new ArrayList<Item>();

	XmlPullParserFactory pullParserFactory;
	public final static String files_directory = "/storage/extSdCard/MM/ITEMS";
	public ListItem(String listName, String listColor) 
	{
		this.listName = listName;
		this.listColor = listColor;
		//save();
	}
	public ListItem(String listName) 
	{
		load(listName);
	}
	public ListItem() 
	{
		super();
	}
	
	//Core Functions
	public void addItem(String data)
	{
		this.list.add(new Item(data));
		//save();
	}
	public void removeItem(String data)
	{
		int tmp = findItem(data);
		if (tmp > -1)
			this.list.remove(tmp);
		//save();
	}
	public int findItem(String data)
	{
		for (int i=0;i<list.size();i++)
		{
			if (list.get(i).toString() == data ) 
				return i;
		}
		return -1;
	}
	@Override
	public String toString() 
	{
		return "ListItem [listName=" + listName + ", listColor=" + listColor
				+ ", list=" + list + "]";
	}
	public boolean load(String listName)
	{
		File item = new File(ListItem.files_directory + "/" + listName + ".xml");
		if (item.canRead())
		{
			try {
				pullParserFactory = XmlPullParserFactory.newInstance();
				XmlPullParser parser = pullParserFactory.newPullParser();

				    InputStream in_s = item;
			        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
		            parser.setInput(in_s, null);

		            parseXML(parser);

			} catch (XmlPullParserException e) {

				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		private void parseXML(XmlPullParser parser) throws XmlPullParserException,IOException
		{
			ArrayList<product> products = null;
		    int eventType = parser.getEventType();
		    Product currentProduct = null;

		    while (eventType != XmlPullParser.END_DOCUMENT){
		        String name = null;
		        switch (eventType){
		            case XmlPullParser.START_DOCUMENT:
		            	products = new ArrayList();
		                break;
		            case XmlPullParser.START_TAG:
		                name = parser.getName();
		                if (name == "product"){
		                    currentProduct = new Product();
		                } else if (currentProduct != null){
		                    if (name == "productname"){
		                        currentProduct.name = parser.nextText();
		                    } else if (name == "productcolor"){
		                    	currentProduct.color = parser.nextText();
		                    } else if (name == "productquantity"){
		                        currentProduct.quantity= parser.nextText();
		                    }  
		                }
		                break;
		            case XmlPullParser.END_TAG:
		                name = parser.getName();
		                if (name.equalsIgnoreCase("product") && currentProduct != null){
		                	products.add(currentProduct);
		                } 
		        }
		        eventType = parser.next();
		    }

		    printProducts(products);
		}

		private void printProducts(ArrayList</product><product> products)
		{
			String content = "";
			Iterator</product><product> it = products.iterator();
			while(it.hasNext())
			{
				Product currProduct  = it.next();
				content = content + "nnnProduct :" +  currProduct.name + "n";
				content = content + "Quantity :" +  currProduct.quantity + "n";
				content = content + "Color :" +  currProduct.color + "n";

			}

			TextView display = (TextView)findViewById(R.id.info);
			display.setText(content);
		}

		@Override
		public boolean onCreateOptionsMenu(Menu menu) {
			// Inflate the menu; this adds items to the action bar if it is present.
			getMenuInflater().inflate(R.menu.main, menu);
			return true;
		}

		}

			return true;
		}
		return false;
	}
	public boolean save()
	{
		 File item_folder = new File(ListItem.files_directory);
		 item_folder.mkdirs();
		 XmlSerializer serializer = Xml.newSerializer();
		 StringWriter writer = new StringWriter();
		 try {
				 serializer.setOutput(writer);
			     serializer.startDocument("UTF-8", true);
			     serializer.startTag("", "XML");
				     serializer.startTag("", "NameList");
				     	serializer.text(this.getListName());
				     serializer.endTag("", "NameList");
				     serializer.startTag("", "ColorList");
				     	serializer.text(this.getListColor().toString());
				     serializer.endTag("", "ColorList");				     
				     serializer.startTag("", "ItemList");
					     for (Item item: this.getList()){
					            serializer.startTag("", "Item");
					            serializer.text(item.toString());
					            serializer.endTag("", "Item");
					     }
				     serializer.endTag("", "ItemList");
				 serializer.endTag("", "XML");    
			     serializer.endDocument();
			     FileWriter fw = new FileWriter(item_folder + "/" + listName + ".xml");
			     fw.write(writer.toString());
			     fw.close();
			     return true;
		    } 
		 catch (Exception e) 
		    {
		        throw new RuntimeException(e);
		    } 
	}

	

	// Getters&Setters
	public String getListName() 
	{
		return listName;
	}
	public void setListName(String listName) {
		this.listName = listName;
		save();
	}
	public String getListColor() {
		return listColor;
	}
	public void setListColor(String listColor) {
		this.listColor = listColor;
		save();
	}
	public ArrayList<Item> getList() {
		return list;
	}
}
