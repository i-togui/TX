package com.example.mmrecorder_components;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.xml.sax.InputSource;
import org.xmlpull.v1.XmlSerializer;

import android.os.Bundle;
import android.provider.DocumentsContract.Document;
import android.app.Activity;
import android.util.Log;
import android.util.Xml;
import android.view.Menu;

public class XMLActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_xml);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) 
	{
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.xml, menu);
		return true;
	}
	public void readXML()
	{
		List<Message> messages = null;
        XmlPullParser parser = Xml.newPullParser();
        try {
            // auto-detect the encoding from the stream
            parser.setInput(this.getInputStream(), null);
            int eventType = parser.getEventType();
            Message currentMessage = null;
            boolean done = false;
            while (eventType != XmlPullParser.END_DOCUMENT && !done){
                String name = null;
                switch (eventType){
                    case XmlPullParser.START_DOCUMENT:
                        messages = new ArrayList<Message>();
                        break;
                    case XmlPullParser.START_TAG:
                        name = parser.getName();
                        if (name.equalsIgnoreCase(ITEM)){
                            currentMessage = new Message();
                        } else if (currentMessage != null){
                            if (name.equalsIgnoreCase(LINK)){
                                currentMessage.setLink(parser.nextText());
                            } else if (name.equalsIgnoreCase(DESCRIPTION)){
                                currentMessage.setDescription(parser.nextText());
                            } else if (name.equalsIgnoreCase(PUB_DATE)){
                                currentMessage.setDate(parser.nextText());
                            } else if (name.equalsIgnoreCase(TITLE)){
                                currentMessage.setTitle(parser.nextText());
                            }    
                        }
                        break;
                    case XmlPullParser.END_TAG:
                        name = parser.getName();
                        if (name.equalsIgnoreCase(ITEM) && 
currentMessage != null){
                            messages.add(currentMessage);
                        } else if (name.equalsIgnoreCase(CHANNEL)){
                            done = true;
                        }
                        break;
                }
                eventType = parser.next();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return messages;
	}
	public void addNode()
	{
		
		try {
			File newxmlfile = new File("/mnt/sdcard/new.xml");
			FileInputStream fis = new FileInputStream(newxmlfile);
			Document doc = null;
	        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	        try {
	 
	            DocumentBuilder db = dbf.newDocumentBuilder();
	 
	            InputSource is = new InputSource();
	            doc = db.parse(fis.); 
	 
	            } catch (ParserConfigurationException e) {
	                Log.e("Error: ", e.getMessage());
	                return null;
	            } catch (SAXException e) {
	                Log.e("Error: ", e.getMessage());
	                return null;
	            } catch (IOException e) {
	                Log.e("Error: ", e.getMessage());
	                return null;
	            }
	                // return DOM
	            return doc;
		
		
		
		
			} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public void rmNode()
	{}
	public void alterNode()
	{}
	public void createXML()
	{
		File newxmlfile = new File("/mnt/sdcard/new.xml");
		try{
	            newxmlfile.createNewFile();
	        }catch(IOException e)
	        {
	            Log.e("IOException", "Exception in create new File(");
	        }
	        FileOutputStream fileos = null;
	        try{
	            fileos = new FileOutputStream(newxmlfile);

	        }catch(FileNotFoundException e)
	        {
	            Log.e("FileNotFoundException",e.toString());
	        }
	        try {
				writeUsingXMLSerializer(fileos);
				fileos.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        
	}
	public static void writeUsingXMLSerializer(FileOutputStream writer) throws Exception {
	    XmlSerializer xmlSerializer = Xml.newSerializer();
	  
	    xmlSerializer.setOutput(writer, "UTF-8");
	    // start DOCUMENT
	    xmlSerializer.startDocument("UTF-8", true);
	    // open tag: <record>
	    xmlSerializer.startTag("", "meeting");
	    // open tag: <study>
	    xmlSerializer.startTag("", "node1");
	    xmlSerializer.attribute("", "param1", "10");
	    xmlSerializer.endTag("", "node1");
	    // open tag: <topic>
	    
	    xmlSerializer.startTag("", "node2");
	    xmlSerializer.text("Du Text!");
	    xmlSerializer.endTag("", "node2");
	    
	    
	    xmlSerializer.endTag("", "meeting");
	    
	    
	    // end DOCUMENT
	    xmlSerializer.endDocument();
	    xmlSerializer.flush();
	}
}
