package core;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;

import android.util.Log;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfWriter;


public class FirstPdf {
  private static String FILE = "FirstPdf.pdf";
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);

  static Meeting m;
  
  public FirstPdf(Meeting m) 
  {
    this.m=m;
    
    this.m.read_sequences();
    try {
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(Tools.meetings_directory + "/" +m.directoryName + "/rapport.pdf"));
      document.open();
      addMetaData(document);
      addTitlePage(document);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  
  
  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
	
    document.addTitle("Repport");
    document.addSubject("Using iText");
    document.addKeywords("Repport, UTT, MMReport, MMRecord");
    document.addAuthor("TOGUI");
    document.addCreator("TOGUI");
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
        // Lets write a big header
    
    
    ArrayList<Sequence> SL = FirstPdf.m.sequencesList;
    
    addEmptyLine(preface, 5);
    
    
    
    Paragraph p1 = new Paragraph(FirstPdf.m.getTitle(), catFont);
    p1.setAlignment(Paragraph.ALIGN_CENTER);
    preface.add(p1);
    // Will create: Report generated by: _name, _date
    
    Paragraph p2 = new Paragraph("Meeting Done at : "+FirstPdf.m.getPlace()+", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
    		 redFont);
    p2.setAlignment(Paragraph.ALIGN_CENTER);
    preface.add(p2);
    
    Paragraph p3 =new Paragraph("------------------------------------------------------------------------------",
            smallBold);
    p3.setAlignment(Paragraph.ALIGN_CENTER);
    preface.add(p3);
    addEmptyLine(preface, 2);
    
    
    String s = (String) Sequence.getAttendees(SL).get(0);
    
    for(int i = 1; i< Sequence.getAttendees(SL).size(); i++)
    {
    	s.concat(", ");
//    	s.concat((String)Sequence.getAttendees(SL).get(i));
    }
    
    Log.e("eeeeeeeee", "I'm heere>"+s);
	
    p3 = new Paragraph("ATTENDEES : " + s, smallBold);
    p3.setAlignment(Paragraph.ALIGN_CENTER);
    preface.add(p3);

    p3 = new Paragraph("Reporter : " + Sequence.getReporter(SL), smallBold);
    p3.setAlignment(Paragraph.ALIGN_CENTER);
    preface.add(p3);

    addEmptyLine(preface, 2);
    preface.add(new Paragraph("----------------------------------------------------------------------------------------------------------------------------------",
            smallBold));

    document.add(preface);
//	  for(int i=0;i<Sequence.getQuestions(SL).size();i++)
//	  {
//		  Anchor anchor = new Anchor(Sequence.getQuestions(SL).get(i).toString(), catFont);
//		  anchor.setName(Sequence.getQuestions(SL).get(i).toString());
//		  Chapter catPart = new Chapter(new Paragraph(anchor), i+1);
//		  ArrayList<Sequence> MINI_SL = Sequence.getSequences(SL, Sequence.getQuestions(SL).get(i).toString());
//		  for(int j=0;j<MINI_SL.size();j++)
//		  {
//			  Paragraph subPara = new Paragraph(MINI_SL.get(j).getWhoSpeacking().getName(), subFont);
//			  Section subCatPart = catPart.addSection(subPara);
//			  subCatPart.add(new Paragraph(MINI_SL.get(j).getItemsList().toString()));
//			  subCatPart.add(new Paragraph(MINI_SL.get(j).getComment()));
//			    // now add all this to the document
//		  }
//		  document.add(catPart);
//	  }
    
  }


  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 
